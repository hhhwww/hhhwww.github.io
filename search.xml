<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[引入多线程的代价]]></title>
      <url>http://yoursite.com/2016/08/21/%E5%BC%95%E5%85%A5%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BB%A3%E4%BB%B7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在现代计算机系统中,使用多线程和并发技术无疑是提升系统运行效率的重要手段之一,他可以最大化的利用cpu的<code>空闲时间</code>,提升系统的吞吐量和速率,但是,引入这些诱人的技术代价也是不容忽视的,比如上下文切换带来的额外开销,内存同步造成的损耗等等,如果这些诱人的技术带来的性能提升不足以掩盖他们的缺点时,我们的工程系统就需要立刻被重新设计,生于忧患死于安乐,因此,在知晓其好处之前我们更应该洞察其缺点</p>
</blockquote>
<h2 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h2><p><img src="http://img.blog.csdn.net/20160821201302750" alt="这里写图片描述"></p>
<ul>
<li>当多个线程在Ready和Running两个状态之间互相转换(时间片轮转模式)的时候就发生了所谓的上下文切换,操作系统会将正在使用cpu的线程上下文先保存到TCB中,然后将新调度进来的上下文设置为当前上下文</li>
<li>cpu会根据调度器中的当前上下文去执行线程,拿到需要执行的线程后首先做的事是根据此线程的TCB中的信息去恢复此线程之前的状态,这些操作需要频繁的去访问JVM和操作系统共享的数据结构,一个cpu分配给一个线程的时间片是一定的,我们在这些操作上消耗越多,给线程执行真正的任务的时间就越少</li>
<li>根据java并发编程实战上所讲,在大多数的通用处理器中,上下文的切换开销相当于5000 - 10000个时钟周期,大概在几微秒左右</li>
</ul>
<h2 id="内存同步"><a href="#内存同步" class="headerlink" title="内存同步"></a>内存同步</h2><ul>
<li><p>安全性与活跃性之间永远存在制衡,为了保证并发情况下的安全性,相应的同步策略是必不可少的,Java中synchronized和volatile提供的可见性保证中会使用一些特殊的汇编指令,叫做内存屏障,它可以刷新缓存,使缓存无效,从而保证每个线程读到应用了此技术的对象时会直接从内存中读取而不是高速缓存(本地内存)中,这样就可以保证多个线程可以立刻看到关于此对象最新的改动<br><img src="http://img.blog.csdn.net/20160821211928635" alt="这里写图片描述"></p>
</li>
<li><p>比较可惜的是,这项技术会抑制一些现代编译器的优化,在内存屏障里的代码段,他们是不能被重排序的,并且同步会增加共享内存总线上的通信量,总线的带宽是有限的,所有的处理器都将共享这条总线,如果有多个线程竞争同步带宽,那么所有使用了同步的线程都会受到影响<br><img src="http://img.blog.csdn.net/20160821211618622" alt="这里写图片描述"></p>
</li>
</ul>
<h2 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h2><ul>
<li>引入多线程后就会存在竞争,在锁上发生竞争时,失败的线程肯定会被阻塞,JVM在实现阻塞行为时采用自旋等待或者被系统挂起的方式,这两种方式效率的高低取决与上下文切换的开销以及线程在成功获取锁之前需要等待的时间,如果等待时间很短,则时候自旋方式,反之,则适合挂起的方式.有些JVM将根据对历史等待时间的分析数据在两者之间动态的选择,但是大多数的JVM在等待锁时都选择了挂起的模式</li>
<li>当一个线程因阻塞被挂起时,他会产生两次额外的上下文切换,以及必要的操作系统操作和缓存操作(上下文切换会导致高速缓存中的内容丢失),这些都是阻碍系统高速运行的原因</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ListView缓存原理剖析]]></title>
      <url>http://yoursite.com/2016/08/11/ListView%E7%BC%93%E5%AD%98%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="单类型View缓存机制"><a href="#单类型View缓存机制" class="headerlink" title="单类型View缓存机制"></a>单类型View缓存机制</h2><p><img src="http://img.blog.csdn.net/20160810223705616" alt="这里写图片描述"></p>
<ul>
<li>请看上图，字母前面的数字表示元素在屏幕上的position,字母代表着View的类型，例如<code>1A</code>就表示第一个位置并且类型为A的View</li>
<li><p>当从状态一转变为状态2后，1A被滑出，5A被滑入，由于5A在被滑入之前缓存池中没有元素，所以5A将被创建，并且当1A滑出屏幕时将被投入到缓存池中，缓存池是一个ArrayList的数组<code>private ArrayList&lt;View&gt;[] mScrapViews;</code>,我用下图代替<br><img src="http://img.blog.csdn.net/20160810222700844" alt="这里写图片描述"></p>
</li>
<li><p>当从状态2变为状态3时，缓存池的状态如下图所示，注意，这里的6A其实复用的是缓存池中存在的1A，6A滑入时发现缓存池中有和自己类型相同的View,则直接将1A从缓存池中<strong>取出</strong>，相似的，2A被滑出后将被缓存池回收。<br><img src="http://img.blog.csdn.net/20160810222953784" alt="这里写图片描述"></p>
</li>
</ul>
<blockquote>
<p>结论：有没有一种生产者和消费者的感觉，一只手从缓存池中拿缓存，相应的一只手把移除的View投入缓存池中，这样会进入一个良性循环中，既无论ListView需要展现多少数据，在内存中存在的View的数量是恒定的，一直为一个屏幕所能展现的所有View+1(缓存池中的View),注意这个前提是基于加载的都是同类型的情况。</p>
</blockquote>
<h2 id="多类型View缓存机制"><a href="#多类型View缓存机制" class="headerlink" title="多类型View缓存机制"></a>多类型View缓存机制</h2><ul>
<li><p>多类型View的缓存机制和上面相差不大，请看下图<br><img src="http://img.blog.csdn.net/20160810225143106" alt="这里写图片描述"></p>
</li>
<li><p>说一下状态4和状态5，从状态3 -&gt; 状态4时，缓存池缓存了离开屏幕的3C,并且滑入7A时系统发现缓存池冲存在A类型的View,所以7A直接复用了1A，当从状态4 -&gt; 状态5时，由于4C滑出，自然而然被缓存，注意此时缓存池中以及有了两个C(这就是为什么缓存池使用的数据结构是ArrayList数组的原因,也符合生产者和消费者的规则)</p>
</li>
</ul>
<h2 id="缓存原理剖析"><a href="#缓存原理剖析" class="headerlink" title="缓存原理剖析"></a>缓存原理剖析</h2><ul>
<li>不知道大家有没有这样的一个疑惑，负责缓存的mScrapViews数组的容量是谁来确定的？并且，同类型的View被缓存时投入了同一个ArrayList中又是如何实现的?</li>
<li><p>当我们需要ListView支持多类型复用时，往往要覆盖这两个方法(以下是他们的默认实现)，<code>getViewTypeCount</code>就决定了mScrapViews数组的长度，<code>getItemViewType</code>就决定了相同类型的View投放到哪个坐标下,<strong>这句话的意思就是相同类型的View需要返回相同的值，并且它的值必须是从0开始依次递增的。</strong>，因此，我们由它们俩的默认实现看出当我们使用同类型加载数据的ListView时，这两个方法我们不必去理会。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewTypeCount</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>ListView的缓存原理由它的父类AbsListView的内部类RecycleBin负责，我们接下来就依次研究其中的重要方法。</p>
</li>
<li><p>以下是缓存池的初始化，传递的参数既是<code>getViewTypeCount</code>的返回值</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setViewTypeCount</span><span class="params">(<span class="keyword">int</span> viewTypeCount)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (viewTypeCount &lt; <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Can't have a viewTypeCount &lt; 1"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//noinspection unchecked</span></div><div class="line">    ArrayList&lt;View&gt;[] scrapViews = <span class="keyword">new</span> ArrayList[viewTypeCount];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; viewTypeCount; i++) &#123;</div><div class="line">        scrapViews[i] = <span class="keyword">new</span> ArrayList&lt;View&gt;();</div><div class="line">    &#125;</div><div class="line">    mViewTypeCount = viewTypeCount;</div><div class="line">    mCurrentScrap = scrapViews[<span class="number">0</span>];</div><div class="line">    mScrapViews = scrapViews;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>这个函数非常重要，ListView中的元素第一次初始化都会调用此方法，通俗来讲它是给每个View分类编号，请重点关注这句代码<code>lp.viewType = mAdapter.getItemViewType(position);</code>,调用了我们会复写的<code>getItemViewType(position)</code>方法，所以说，让相同类型的View返回同一个值是需要我们自己去维护的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setItemViewLayoutParams</span><span class="params">(View child, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> ViewGroup.LayoutParams vlp = child.getLayoutParams();</div><div class="line">    LayoutParams lp;</div><div class="line">    <span class="keyword">if</span> (vlp == <span class="keyword">null</span>) &#123;</div><div class="line">        lp = (LayoutParams) generateDefaultLayoutParams();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!checkLayoutParams(vlp)) &#123;</div><div class="line">        lp = (LayoutParams) generateLayoutParams(vlp);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        lp = (LayoutParams) vlp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mAdapterHasStableIds) &#123;</div><div class="line">        lp.itemId = mAdapter.getItemId(position);</div><div class="line">    &#125;</div><div class="line">    lp.viewType = mAdapter.getItemViewType(position);</div><div class="line">    <span class="keyword">if</span> (lp != vlp) &#123;</div><div class="line">      child.setLayoutParams(lp);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>接下来就是ListView中最核心的方法,我将难点都用注释标注，应该很好理解</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function">View <span class="title">obtainView</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">boolean</span>[] isScrap)</span> </span>&#123;  </div><div class="line">    isScrap[<span class="number">0</span>] = <span class="keyword">false</span>;  </div><div class="line">    View scrapView; </div><div class="line">    <span class="comment">// 根据position调用getItemViewType(position)方法可以获得View在缓存池的位置</span></div><div class="line">    scrapView = mRecycler.getScrapView(position);  </div><div class="line">    View child;  </div><div class="line">    <span class="keyword">if</span> (scrapView != <span class="keyword">null</span>) &#123;  </div><div class="line">	    <span class="comment">// 如果不为null,我们就可以利用convertView进行复用操作</span></div><div class="line">        child = mAdapter.getView(position, scrapView, <span class="keyword">this</span>);  </div><div class="line">        <span class="keyword">if</span> (child != scrapView) &#123;</div><div class="line">	        <span class="comment">// 如果返回的View和我们从缓存池中拿出的View不同，则把它重新存进去</span></div><div class="line">            mRecycler.addScrapView(scrapView);  </div><div class="line">            <span class="keyword">if</span> (mCacheColorHint != <span class="number">0</span>) &#123;  </div><div class="line">                child.setDrawingCacheBackgroundColor(mCacheColorHint);  </div><div class="line">            &#125;  </div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line">            isScrap[<span class="number">0</span>] = <span class="keyword">true</span>;  </div><div class="line">            dispatchFinishTemporaryDetach(child);  </div><div class="line">        &#125;  </div><div class="line">    &#125; <span class="keyword">else</span> &#123;  </div><div class="line">	    <span class="comment">// 当缓存池中没有时，传递convertView为null</span></div><div class="line">        child = mAdapter.getView(position, <span class="keyword">null</span>, <span class="keyword">this</span>);  </div><div class="line">        <span class="keyword">if</span> (mCacheColorHint != <span class="number">0</span>) &#123;  </div><div class="line">            child.setDrawingCacheBackgroundColor(mCacheColorHint);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> child;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>以上就是ListView缓存原理的分析，大家可以进入源代码的世界享受巧妙编码带来的享受，加深自己的理解感触。</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>ListView的缓存机制利用了生产者和消费者的原理，View滑出屏幕时把它缓存起来，当下一个View滑入时，如果能在缓存池中找到，则把它取出来(从缓存池中remove掉了)复用。</li>
</ul>
<h2 id="ListView缓存机制可以优化的地方"><a href="#ListView缓存机制可以优化的地方" class="headerlink" title="ListView缓存机制可以优化的地方"></a>ListView缓存机制可以优化的地方</h2><ul>
<li>用于缓存的每一个类型的ArrayList没有容量限制，有可能内存中会缓存了很多同类型的View,这样是很大的浪费，解决方案是可以设置最大缓存数量，比如当A类型的View超过10个时，直接干掉ArrayList首部的View或者不再向缓存池中加入此类型的View,直到此类型的View数量在缓存池中小于5</li>
<li>当同个类型的View的多个实例(数量大于某个值)在缓存池中存在过长时间时(时间大于某个值)，可以利用缓存过期原理，逐步remove掉arraylist中的数据，并动态的设置变换缓存时间，达到高效利用(比如当arraylist[0]中存在11个缓存的View时，并且时间已经过了第一次过期时间5min,那么将remove掉第11个元素，如果又过4分钟此arraylist[0]还没有元素被使用，remove掉第10个元素，依次类推，直到最后一分钟还未使用，直接removeAll)</li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
